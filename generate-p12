#!/bin/bash
# Tested in GNU bash, version 3.2.57(1)-release (2007) (x86_64-apple-darwin23)

##############################################################################################
# Generates a .p12 client certificate for Salesforce B2C Commerce stg code upload MFA        #
##############################################################################################
# Usage:                                                                                     #
#   generate-p12 [cert_bundle_directory]                                                     #
# Run from the directory the cert bundle was unzipped to or provide that path as an argument #
##############################################################################################

_generate_p12() {
    # Example hostname: "cert.staging.customer.realm.demandware.net"
    # However, any BM hostname or as little as "customer.realm" or "customer-realm" may be provided

    # Text colors and formatting for later use - by convention wrapped in {} when used below, for legibility
    local red;       red="$(tput setaf 9)"  # 9  == bright red (8+1)
    local green;   green="$(tput setaf 10)" # 10 == bright green (8+2)
    local yellow; yellow="$(tput setaf 11)" # 11 == bright yellow (8+3)
    local bold;     bold="$(tput bold)" # start bolding text
    local smul;     smul="$(tput smul)" # start underlining text
    local rmul;     rmul="$(tput rmul)" # stop underlining text
    local reset;   reset="$(tput sgr0)" # reset all formatting to terminal default
    # Note: There is no `tput unbold`. `tput bold` is $'\E[1m', which you would generally undo with
    #  $'\E[0m' or $'\E[m', but those essentially match `tput sgr0`, clearing all formatting

    _file_exists() {
        [ -f "$1" ] || { echo "File not found: $1" >&2; return 1; }
        return 0
    }
    _repeat() { # repeats a string n times
        printf "%$2s" | sed "s/ /$1/g"
    }
    _bold() {
        echo "$bold$*$reset"
    }

    # TODO: We should just include the path in the filenames rather than changing to the directory and back
    local wd="$1" # working directory
    # Save old dir to `cd` back to
    local old_dir="$PWD"
    # `cd` to working directory (or current if not provided, which will be a no-op)
    cd "${wd:-"$PWD"}" || { echo "[ERR] Failed to change to specified directory" >&2; return 1; }

    local hostname
    printf %s "Hostname (cert.staging.***): "
    read -r hostname
    echo #newline
    # Make sure we end up with a good hostname no matter what form it's provided in
    # Any PIG instance's BM hostname will end up in the "cert.staging" form, or even providing as little as "customer-realm"
    hostname="$(printf %s "$hostname" | sed 's/_/./g; s/-/./g;
                                             s/^production\.//; s/^development\.//; s/^staging\.//; s/^cert\.staging\.//;
                                             s/^/cert.staging./;
                                             s/\.demandware\.net$//;
                                             s/$/.demandware.net/'
    )"

    # Assemble cert bundle filenames and verify that they all exist before proceeding
    local ca_cert_filename="${hostname}_01.crt"
    local ca_key_filename="${hostname}_01.key"
    local ca_pass_filename="${hostname}_01.txt"
    local ca_serial_filename="${hostname}.srl" # CA serial is the only one which doesn't end in _01
    local any_missing
    _file_exists "$ca_cert_filename" || any_missing=true
    _file_exists "$ca_key_filename" || any_missing=true
    _file_exists "$ca_pass_filename" || any_missing=true
    _file_exists "$ca_serial_filename" || any_missing=true
    [ "$any_missing" ] && { echo "[ERR] Necessary file(s) missing, aborting p12 generation" >&2; return 1; }

    # Define output file names
    local user="$USER"
    local req_filename="$user-$hostname.req"
    local key_filename="$user-$hostname.key"
    local pem_filename="$user-$hostname.pem"
    local p12_filename="$user-$hostname.p12"

    # Print the filenames which will be used
    cat <<EOF
${smul}Using these filenames:${rmul}
  $ca_cert_filename
  $ca_key_filename
  $ca_pass_filename
  $ca_serial_filename
  $req_filename
  $key_filename
  $pem_filename
  $p12_filename
EOF
    echo #newline

    # Prompt for desired cert expiration, in years
    local years
    printf %s "Years until expiration: "
    read -r years
    local days=$((years*365))
    echo #newline

    ### Step 1 of 3: Generate a CSR and private key
    if ! openssl req -new -sha256 -newkey rsa:2048 -nodes -out "$req_filename" -keyout "$key_filename"; then
        _bold "[ERR] \`openssl req\` (step 1/3) failed - .req and .key files not generated" >&2
        return 1
    fi
    printf '%s\n' '' "$(_bold "Created CSR:")" "$req_filename"
    printf '%s\n' "$(_bold "Created private key:")" "$key_filename" ''

    ### Step 2a of 3: Copy password for CA key
    # Back up existing clipboard contents
    local clipboard; clipboard="$(pbpaste)"
    # Copy password from text file to clipboard and print
    local pass; pass="$(cat "$ca_pass_filename")"
    if printf %s "$pass" | pbcopy; then
        # Print hyphens all the way across for a horizontal rule
        local term_width; term_width="$(tput cols)"
        echo "${red}$(_repeat '-' "$term_width")${reset}"
        echo "${red}${bold}Pass phrase for ${yellow}$ca_key_filename${red}: ${green}$pass${reset}"
        echo "${red}(already copied to clipboard, just use ${yellow}Cmd+V${red}/${yellow}Ctrl+V${red} to paste and hit Enter)${reset}"
        echo "${red}(${smul}no text will appear${rmul} as you type/paste because it is a secure prompt)${reset}"
        echo "${red}$(_repeat '-' "$term_width")${reset}"
    fi

    ### Step 2b of 3: Create a certificate from the CSR using the CA files (prompts for password from step 2a)
    if ! openssl x509 -req -in "$req_filename" -out "$pem_filename" -days "$days" -CA "$ca_cert_filename" -CAkey "$ca_key_filename" -CAserial "$ca_serial_filename"; then
        # Restore clipboard if needed
        [ "$clipboard" ] && printf %s "$clipboard" | pbcopy
        _bold "[ERR] \`openssl x509\` (step 2/3) failed - .pem file not generated" >&2
        return 1
    fi
    printf '%s\n' '' "$(_bold "Created X.509 intermediate certificate:")" "$pem_filename" ''
    # Restore clipboard if needed
    [ "$clipboard" ] && printf %s "$clipboard" | pbcopy

    ### Step 3 of 3: Bundle the CA-signed certificate and the private key from step 1 into a .p12 client certificate
    # Below lines are printed right before the "Enter Export Password" prompt from the pkcs12 export command
    echo "${bold}NOTE:${reset} This encrypts the client certificate itself, so that it cannot be used without this password."
    echo "${smul}secure prompt: no text will appear as you type${rmul}"
    if ! openssl pkcs12 -export -in "$pem_filename" -inkey "$key_filename" -certfile "$ca_cert_filename" -name "$user-$hostname" -out "$p12_filename"; then
        _bold "[ERR] \`openssl pkcs12\` (step 3/3) failed - .p12 file not generated" >&2
        return 1
    fi
    printf '%s\n' '' "$(_bold "Created PKCS12 client certificate:")" "$p12_filename" ''

    ### DONE
    _bold "Finished successfully. Full path to p12:"
    realpath "$p12_filename"

    # Clean up internal functions to avoid polluting global namespace
    unset -f _file_exists
    unset -f _repeat
    unset -f _bold
    cd "$old_dir" || { echo "[ERR] Failed to revert to original directory" >&2; return 1; }
}

_generate_p12 "$@"
