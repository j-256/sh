#!/usr/bin/env bash

###########################################################################
# Finds the equivalent buying power today* of a historical amount of USD. #
# e.g. "$1234.56 in Feb 1980 is equivalent to $4915.94 in Jun 2024"       #
# Data Source: https://data.bls.gov/cgi-bin/cpicalc.pl                    #
# * Most recent month available is used, typically a 1-month delay        #
###########################################################################
# Usage:                                                                  #
#   inflate <amount> <year> [month]                                       #
#   (where month is an integer in [1,12], default 1)                      #
# Sample output with stderr:                                              #
#   $ inflate 150 1970 9                                                  #
#   $150.00: Sep 1970 -> Jun 2024                                         #
#   1202.20                                                               #
# Sample output without stderr:                                           #
#   $ inflate 150 1970 9 2>/dev/null                                      #
#   1202.20                                                               #
###########################################################################

_inflate() {
    [ "$1" ] || { echo "amount is required" >&2; return 1; }
    [ "$2" ] || { echo "year is required" >&2; return 1; }
    local amount; amount="$(printf '%.2f' "$1")"
    local input_year="$2"
    local input_month="${3:-1}" # default to January
    # Zero-pad month if necessary - printf is not good here because numbers with leading zeroes can be interpreted as octal
    [ "$input_month" -lt 10 ] && input_month="0${input_month#0}"

    # US Bureau of Labor Statistics inflation calculator
    local CALCULATOR_URL="https://data.bls.gov/cgi-bin/cpicalc.pl"

    # Month names array with a placeholder at index 0, so that 1 is January and 12 is December
    local MONTHS=(ERR Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec)

    # Get the most recent month of data available (e.g. 202406), from the second dropdown
    local recent_year_month; recent_year_month="$(curl -fsS "$CALCULATOR_URL" \
                                                  | grep 'selected="selected"' \
                                                  | tail -n 1 \
                                                  | sed -n 's/.*value="\([^"]*\)".*/\1/p')"
    local recent_year="${recent_year_month:0:4}"
    local recent_month="${recent_year_month:4:2}"

    # Format the input and recent year-month dates into a more readable format, e.g. "Jan 2024" rather than "202401"
    # "10#" is necessary to avoid numbers with a leading 0 from being interpreted as octal - alternatively ${MONTHS[${input_month#0}]}
    local input_date_formatted="${MONTHS[10#$input_month]} $input_year"
    local recent_date_formatted="${MONTHS[10#$recent_month]} $recent_year"

    # Fetch the data and extract the adjusted amount
    local result; result="$(curl -fsS "$CALCULATOR_URL?cost1=$amount&year1=$input_year$input_month&year2=$recent_year$recent_month" \
                            | sed -n '/id="answer"/{s/^.*\$//;s/<.*$//;s/,//g;p;}')"
    if [ -z "$result" ]; then
        echo "Failed to convert \$$amount from $input_date_formatted to $recent_date_formatted" >&2
        return 1
    fi

    # Print the result, with details to stderr only in case just the number is needed (i.e. if it's called from another script)
    echo "\$$amount: $input_date_formatted -> $recent_date_formatted" >&2
    echo "$result"
}

_inflate "$@"
